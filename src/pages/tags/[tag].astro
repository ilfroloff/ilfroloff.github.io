---
import { getCollection } from "astro:content";
import arrayDateComparator from "src/utils/array-date-comparator";
import Layout from "src/layouts/Layout.astro";
import ArticleBrief from "src/components/ArticleBrief.astro";
import HotLink from "../../components/HotLink.astro";
import type { GetStaticPaths, InferGetStaticPropsType } from "astro";

export const getStaticPaths = (async () => {
  const allArticles = await getCollection("articles");
  const allHotLinks = await getCollection("hotlinks");
  const tags: Array<string> = [...allArticles, ...allHotLinks].flatMap(
    (item) => item.data.tags ?? [],
  );

  return tags.map((tag) => ({
    params: {
      tag,
    },
    props: {
      entries: [
        ...allArticles.filter((item) => item.data.tags?.includes(tag)),
        ...allHotLinks.filter((item) => item.data.tags?.includes(tag)),
      ].sort(arrayDateComparator((item) => item.data.publishedAt)),
    },
  }));
}) satisfies GetStaticPaths;

interface Props extends InferGetStaticPropsType<typeof getStaticPaths> {}

const { entries } = Astro.props;
const { tag } = Astro.params;
---

<Layout title={tag}>
  <h1 class="text-2xl">Entries for: #{tag}</h1>
  <section class="flex flex-col gap-6 mt-6 lg:gap-12">
    {
      entries.map((entry) =>
        entry.collection === "articles" ? (
          <ArticleBrief entry={entry} />
        ) : (
          <HotLink entry={entry} />
        ),
      )
    }
  </section>
</Layout>
